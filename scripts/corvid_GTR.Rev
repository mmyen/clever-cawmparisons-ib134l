### Code modified from this link: https://revbayes.github.io/tutorials/ctmc/
# For more information on RevBayes, check out the website: https://revbayes.github.io/

### Read in sequence data for all organisms for the cytb gene.

data = readDiscreteCharacterData("clever-cawmparisons/data/corvids_and_outgroup.nex")

# Get some useful variables from the data. We need these later on.
num_taxa <- data.ntaxa()
num_branches <- 2 * num_taxa - 3
taxa <- data.taxa()

# Make moves and monitors.
moves = VectorMoves()
monitors = VectorMonitors()

### Substitution model: General Time-Reversible (GTR)
# The GTR model is like the HKY model (which assumes unequal stationary frequencies and unequal transition-transversion rates),
# but the exchangeability rates can also differ.

# pi specifies the stationary frequencies that are drawn from a flat Dirichlet distribution.
pi_prior <- v(1,1,1,1) 
pi ~ dnDirichlet(pi_prior)

# pi is a stochastic variable, so have to specify moves to propose updates.
moves.append( mvBetaSimplex(pi, weight=2.0) )
moves.append( mvDirichletSimplex(pi, weight=1.0) )

# er specifies the exchangeability rates that are drawn from a flat Dirichlet distribution.
er_prior <- v(1,1,1,1,1,1)
er ~ dnDirichlet(er_prior)

# er is a stochastic variable, so have to specify moves to propose updates.
moves.append( mvBetaSimplex(er, weight=3.0) )
moves.append( mvDirichletSimplex(er, weight=1.5) )

# create a deterministic variable for the rate matrix, Q
Q := fnGTR(er,pi) 

### Tree model
out_group = clade("Lanius_ludovicianus")

# Prior distribution on the tree topology
topology ~ dnUniformTopology(taxa, outgroup = out_group)
moves.append(mvNNI(topology, weight = num_taxa/1.0)) # NNI (Nearest neighbors interchange) move
# moves.append(mvSPR(topology, weight = num_taxa*2.0)) # SPR (subtree prune and regraft) move

# Branch length prior
for (i in 1:num_branches){
	bl[i] ~ dnExponential(10.0)
	moves.append(mvScale(bl[i]))
}

# Tree length = sum of the branch lengths
TL := sum(bl)

psi := treeAssembly(topology, bl)

### PhyloCTMC Model
# The sequence evolution model uses the GTR matrix with starting stationary frequencies from pi and starting exchangeability rates from er.
seq ~ dnPhyloCTMC(tree = psi, Q = Q, type = "DNA")

# Attach/"clamp" the data
seq.clamp(data)

### Analysis
# Add model
mymodel = model(psi)

# Add monitors
monitors.append( mnScreen(TL, printgen = 100) )
monitors.append( mnFile(psi, filename = "clever-cawmparisons/output_GTR/corvids_cytb_GTR.trees", printgen = 1) )
monitors.append( mnModel(filename = "clever-cawmparisons/output_GTR/corvids_cytb_GTR.log", printgen = 1 ) )

# Run the analysis
mymcmc = mcmc(mymodel, moves, monitors, nruns = 4, combine = "mixed")
mymcmc.run(generations = 100000, tuningInterval = 100)

### Post-Processing: power posterior analysis is done in a different script (corvid_GTR_powp.Rev)
# Analyze tree output by reading in the tree trace
treetrace = readTreeTrace("clever-cawmparisons/output_GTR/corvids_cytb_GTR.trees", treetype = "non-clock")
# Generate the maximum a posteriori non-clock tree
map_tree = mapTree(treetrace, "clever-cawmparisons/output_GTR/corvids_cytb_GTR_MAP.tree")

#You may want to quit RevBayes now
q()
