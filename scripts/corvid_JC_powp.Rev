### Code modified from these links: 
#		- https://revbayes.github.io/tutorials/ctmc/
# 		- https://revbayes.github.io/tutorials/model_selection_bayes_factors/bf_subst_model.html
# For more information on RevBayes, check out the website: https://revbayes.github.io/

# Clear workspace to prevent contamination issues across running different scripts.
clear()

### Read in sequence data for all organisms for the cytb gene.

data = readDiscreteCharacterData("clever-cawmparisons/data/corvids_and_outgroup.nex")

# Get some useful variables from the data. We need these later on.
num_taxa <- data.ntaxa()
num_branches <- 2 * num_taxa - 3
taxa <- data.taxa()

# quit()

# Make moves and monitors.
moves = VectorMoves()
monitors = VectorMonitors()

### Substitution Model: Jukes-Cantor
# The Jukes-Cantor model assumes equal stationary frequencies and equal mutation rates.
Q <- fnJC(4)

### Tree Model
out_group = clade("Lanius_ludovicianus")

# Prior distribution on the tree topology
topology ~ dnUniformTopology(taxa, outgroup = out_group)
moves.append(mvNNI(topology, weight = num_taxa/1.0)) # NNI (Nearest neighbors interchange) move
# moves.append(mvSPR(topology, weight = num_taxa*2.0)) # SPR (subtree prune and regraft) move

# Branch length prior
for (i in 1:num_branches){
	bl[i] ~ dnExponential(10.0)
	moves.append(mvScale(bl[i]))
}

# Tree length = sum of the branch lengths
TL := sum(bl)

psi := treeAssembly(topology, bl)

### PhyloCTMC Model

# The sequence evolution model uses the Jukes-Cantor matrix with equal base frequencies and equal mutation rates.
seq ~ dnPhyloCTMC(tree = psi, Q = Q, type = "DNA")

# Attach/"clamp" the data
seq.clamp(data)

### Analysis (Power Posterior)
# Add model
mymodel = model(psi)

# Add monitors
monitors.append( mnScreen(TL, printgen = 100) )

# Set up power posterior
pow_p = powerPosterior(mymodel, moves, monitors, "clever-cawmparisons/output_JC/powp_JC.out", cats=50)

# Run power posterior
pow_p.burnin(generations=10000,tuningInterval=1000)
pow_p.run(generations=1000)

# Stepping stone analysis
ss = steppingStoneSampler(file="clever-cawmparisons/output_JC/powp_JC.out", powerColumnName="power", likelihoodColumnName="likelihood")
ss.marginal()

# Path sampling analysis
ps = pathSampler(file="clever-cawmparisons/output_JC/powp_JC.out", powerColumnName="power", likelihoodColumnName="likelihood")
ps.marginal()

